// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kv.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_kv_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_kv_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_kv_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_kv_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_kv_2eproto;
namespace fixbug {
class InsertRequest;
class InsertRequestDefaultTypeInternal;
extern InsertRequestDefaultTypeInternal _InsertRequest_default_instance_;
class KeyValuePair;
class KeyValuePairDefaultTypeInternal;
extern KeyValuePairDefaultTypeInternal _KeyValuePair_default_instance_;
class ResultCode;
class ResultCodeDefaultTypeInternal;
extern ResultCodeDefaultTypeInternal _ResultCode_default_instance_;
class SearchOrDeleteRequest;
class SearchOrDeleteRequestDefaultTypeInternal;
extern SearchOrDeleteRequestDefaultTypeInternal _SearchOrDeleteRequest_default_instance_;
class SearchResponse;
class SearchResponseDefaultTypeInternal;
extern SearchResponseDefaultTypeInternal _SearchResponse_default_instance_;
class ShowAllResponse;
class ShowAllResponseDefaultTypeInternal;
extern ShowAllResponseDefaultTypeInternal _ShowAllResponse_default_instance_;
}  // namespace fixbug
PROTOBUF_NAMESPACE_OPEN
template<> ::fixbug::InsertRequest* Arena::CreateMaybeMessage<::fixbug::InsertRequest>(Arena*);
template<> ::fixbug::KeyValuePair* Arena::CreateMaybeMessage<::fixbug::KeyValuePair>(Arena*);
template<> ::fixbug::ResultCode* Arena::CreateMaybeMessage<::fixbug::ResultCode>(Arena*);
template<> ::fixbug::SearchOrDeleteRequest* Arena::CreateMaybeMessage<::fixbug::SearchOrDeleteRequest>(Arena*);
template<> ::fixbug::SearchResponse* Arena::CreateMaybeMessage<::fixbug::SearchResponse>(Arena*);
template<> ::fixbug::ShowAllResponse* Arena::CreateMaybeMessage<::fixbug::ShowAllResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace fixbug {

// ===================================================================

class KeyValuePair PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fixbug.KeyValuePair) */ {
 public:
  inline KeyValuePair() : KeyValuePair(nullptr) {};
  virtual ~KeyValuePair();

  KeyValuePair(const KeyValuePair& from);
  KeyValuePair(KeyValuePair&& from) noexcept
    : KeyValuePair() {
    *this = ::std::move(from);
  }

  inline KeyValuePair& operator=(const KeyValuePair& from) {
    CopyFrom(from);
    return *this;
  }
  inline KeyValuePair& operator=(KeyValuePair&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const KeyValuePair& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KeyValuePair* internal_default_instance() {
    return reinterpret_cast<const KeyValuePair*>(
               &_KeyValuePair_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(KeyValuePair& a, KeyValuePair& b) {
    a.Swap(&b);
  }
  inline void Swap(KeyValuePair* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KeyValuePair* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KeyValuePair* New() const final {
    return CreateMaybeMessage<KeyValuePair>(nullptr);
  }

  KeyValuePair* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KeyValuePair>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const KeyValuePair& from);
  void MergeFrom(const KeyValuePair& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KeyValuePair* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fixbug.KeyValuePair";
  }
  protected:
  explicit KeyValuePair(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kv_2eproto);
    return ::descriptor_table_kv_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 2,
    kKeyFieldNumber = 1,
  };
  // bytes value = 2;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_value();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_value(
      std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // int32 key = 1;
  void clear_key();
  ::PROTOBUF_NAMESPACE_ID::int32 key() const;
  void set_key(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_key() const;
  void _internal_set_key(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:fixbug.KeyValuePair)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::int32 key_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kv_2eproto;
};
// -------------------------------------------------------------------

class ResultCode PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fixbug.ResultCode) */ {
 public:
  inline ResultCode() : ResultCode(nullptr) {};
  virtual ~ResultCode();

  ResultCode(const ResultCode& from);
  ResultCode(ResultCode&& from) noexcept
    : ResultCode() {
    *this = ::std::move(from);
  }

  inline ResultCode& operator=(const ResultCode& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResultCode& operator=(ResultCode&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResultCode& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResultCode* internal_default_instance() {
    return reinterpret_cast<const ResultCode*>(
               &_ResultCode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ResultCode& a, ResultCode& b) {
    a.Swap(&b);
  }
  inline void Swap(ResultCode* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResultCode* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResultCode* New() const final {
    return CreateMaybeMessage<ResultCode>(nullptr);
  }

  ResultCode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResultCode>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResultCode& from);
  void MergeFrom(const ResultCode& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResultCode* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fixbug.ResultCode";
  }
  protected:
  explicit ResultCode(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kv_2eproto);
    return ::descriptor_table_kv_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrmsgFieldNumber = 2,
    kErrcodeFieldNumber = 1,
  };
  // bytes errmsg = 2;
  void clear_errmsg();
  const std::string& errmsg() const;
  void set_errmsg(const std::string& value);
  void set_errmsg(std::string&& value);
  void set_errmsg(const char* value);
  void set_errmsg(const void* value, size_t size);
  std::string* mutable_errmsg();
  std::string* release_errmsg();
  void set_allocated_errmsg(std::string* errmsg);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_errmsg();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_errmsg(
      std::string* errmsg);
  private:
  const std::string& _internal_errmsg() const;
  void _internal_set_errmsg(const std::string& value);
  std::string* _internal_mutable_errmsg();
  public:

  // int32 errcode = 1;
  void clear_errcode();
  ::PROTOBUF_NAMESPACE_ID::int32 errcode() const;
  void set_errcode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_errcode() const;
  void _internal_set_errcode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:fixbug.ResultCode)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errmsg_;
  ::PROTOBUF_NAMESPACE_ID::int32 errcode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kv_2eproto;
};
// -------------------------------------------------------------------

class SearchOrDeleteRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fixbug.SearchOrDeleteRequest) */ {
 public:
  inline SearchOrDeleteRequest() : SearchOrDeleteRequest(nullptr) {};
  virtual ~SearchOrDeleteRequest();

  SearchOrDeleteRequest(const SearchOrDeleteRequest& from);
  SearchOrDeleteRequest(SearchOrDeleteRequest&& from) noexcept
    : SearchOrDeleteRequest() {
    *this = ::std::move(from);
  }

  inline SearchOrDeleteRequest& operator=(const SearchOrDeleteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchOrDeleteRequest& operator=(SearchOrDeleteRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SearchOrDeleteRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SearchOrDeleteRequest* internal_default_instance() {
    return reinterpret_cast<const SearchOrDeleteRequest*>(
               &_SearchOrDeleteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SearchOrDeleteRequest& a, SearchOrDeleteRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SearchOrDeleteRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SearchOrDeleteRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SearchOrDeleteRequest* New() const final {
    return CreateMaybeMessage<SearchOrDeleteRequest>(nullptr);
  }

  SearchOrDeleteRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SearchOrDeleteRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SearchOrDeleteRequest& from);
  void MergeFrom(const SearchOrDeleteRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchOrDeleteRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fixbug.SearchOrDeleteRequest";
  }
  protected:
  explicit SearchOrDeleteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kv_2eproto);
    return ::descriptor_table_kv_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
  };
  // int32 key = 1;
  void clear_key();
  ::PROTOBUF_NAMESPACE_ID::int32 key() const;
  void set_key(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_key() const;
  void _internal_set_key(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:fixbug.SearchOrDeleteRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 key_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kv_2eproto;
};
// -------------------------------------------------------------------

class SearchResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fixbug.SearchResponse) */ {
 public:
  inline SearchResponse() : SearchResponse(nullptr) {};
  virtual ~SearchResponse();

  SearchResponse(const SearchResponse& from);
  SearchResponse(SearchResponse&& from) noexcept
    : SearchResponse() {
    *this = ::std::move(from);
  }

  inline SearchResponse& operator=(const SearchResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchResponse& operator=(SearchResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SearchResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SearchResponse* internal_default_instance() {
    return reinterpret_cast<const SearchResponse*>(
               &_SearchResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SearchResponse& a, SearchResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SearchResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SearchResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SearchResponse* New() const final {
    return CreateMaybeMessage<SearchResponse>(nullptr);
  }

  SearchResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SearchResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SearchResponse& from);
  void MergeFrom(const SearchResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fixbug.SearchResponse";
  }
  protected:
  explicit SearchResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kv_2eproto);
    return ::descriptor_table_kv_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
    kKvPairFieldNumber = 2,
  };
  // .fixbug.ResultCode result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::fixbug::ResultCode& result() const;
  ::fixbug::ResultCode* release_result();
  ::fixbug::ResultCode* mutable_result();
  void set_allocated_result(::fixbug::ResultCode* result);
  private:
  const ::fixbug::ResultCode& _internal_result() const;
  ::fixbug::ResultCode* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::fixbug::ResultCode* result);
  ::fixbug::ResultCode* unsafe_arena_release_result();

  // .fixbug.KeyValuePair kvPair = 2;
  bool has_kvpair() const;
  private:
  bool _internal_has_kvpair() const;
  public:
  void clear_kvpair();
  const ::fixbug::KeyValuePair& kvpair() const;
  ::fixbug::KeyValuePair* release_kvpair();
  ::fixbug::KeyValuePair* mutable_kvpair();
  void set_allocated_kvpair(::fixbug::KeyValuePair* kvpair);
  private:
  const ::fixbug::KeyValuePair& _internal_kvpair() const;
  ::fixbug::KeyValuePair* _internal_mutable_kvpair();
  public:
  void unsafe_arena_set_allocated_kvpair(
      ::fixbug::KeyValuePair* kvpair);
  ::fixbug::KeyValuePair* unsafe_arena_release_kvpair();

  // @@protoc_insertion_point(class_scope:fixbug.SearchResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::fixbug::ResultCode* result_;
  ::fixbug::KeyValuePair* kvpair_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kv_2eproto;
};
// -------------------------------------------------------------------

class InsertRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fixbug.InsertRequest) */ {
 public:
  inline InsertRequest() : InsertRequest(nullptr) {};
  virtual ~InsertRequest();

  InsertRequest(const InsertRequest& from);
  InsertRequest(InsertRequest&& from) noexcept
    : InsertRequest() {
    *this = ::std::move(from);
  }

  inline InsertRequest& operator=(const InsertRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline InsertRequest& operator=(InsertRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InsertRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InsertRequest* internal_default_instance() {
    return reinterpret_cast<const InsertRequest*>(
               &_InsertRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(InsertRequest& a, InsertRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(InsertRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InsertRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InsertRequest* New() const final {
    return CreateMaybeMessage<InsertRequest>(nullptr);
  }

  InsertRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InsertRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InsertRequest& from);
  void MergeFrom(const InsertRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InsertRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fixbug.InsertRequest";
  }
  protected:
  explicit InsertRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kv_2eproto);
    return ::descriptor_table_kv_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKvPairFieldNumber = 1,
  };
  // .fixbug.KeyValuePair kvPair = 1;
  bool has_kvpair() const;
  private:
  bool _internal_has_kvpair() const;
  public:
  void clear_kvpair();
  const ::fixbug::KeyValuePair& kvpair() const;
  ::fixbug::KeyValuePair* release_kvpair();
  ::fixbug::KeyValuePair* mutable_kvpair();
  void set_allocated_kvpair(::fixbug::KeyValuePair* kvpair);
  private:
  const ::fixbug::KeyValuePair& _internal_kvpair() const;
  ::fixbug::KeyValuePair* _internal_mutable_kvpair();
  public:
  void unsafe_arena_set_allocated_kvpair(
      ::fixbug::KeyValuePair* kvpair);
  ::fixbug::KeyValuePair* unsafe_arena_release_kvpair();

  // @@protoc_insertion_point(class_scope:fixbug.InsertRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::fixbug::KeyValuePair* kvpair_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kv_2eproto;
};
// -------------------------------------------------------------------

class ShowAllResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fixbug.ShowAllResponse) */ {
 public:
  inline ShowAllResponse() : ShowAllResponse(nullptr) {};
  virtual ~ShowAllResponse();

  ShowAllResponse(const ShowAllResponse& from);
  ShowAllResponse(ShowAllResponse&& from) noexcept
    : ShowAllResponse() {
    *this = ::std::move(from);
  }

  inline ShowAllResponse& operator=(const ShowAllResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShowAllResponse& operator=(ShowAllResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ShowAllResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ShowAllResponse* internal_default_instance() {
    return reinterpret_cast<const ShowAllResponse*>(
               &_ShowAllResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ShowAllResponse& a, ShowAllResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ShowAllResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShowAllResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ShowAllResponse* New() const final {
    return CreateMaybeMessage<ShowAllResponse>(nullptr);
  }

  ShowAllResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ShowAllResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ShowAllResponse& from);
  void MergeFrom(const ShowAllResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShowAllResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fixbug.ShowAllResponse";
  }
  protected:
  explicit ShowAllResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kv_2eproto);
    return ::descriptor_table_kv_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAllKvPairFieldNumber = 2,
    kResultFieldNumber = 1,
  };
  // repeated .fixbug.KeyValuePair allKvPair = 2;
  int allkvpair_size() const;
  private:
  int _internal_allkvpair_size() const;
  public:
  void clear_allkvpair();
  ::fixbug::KeyValuePair* mutable_allkvpair(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fixbug::KeyValuePair >*
      mutable_allkvpair();
  private:
  const ::fixbug::KeyValuePair& _internal_allkvpair(int index) const;
  ::fixbug::KeyValuePair* _internal_add_allkvpair();
  public:
  const ::fixbug::KeyValuePair& allkvpair(int index) const;
  ::fixbug::KeyValuePair* add_allkvpair();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fixbug::KeyValuePair >&
      allkvpair() const;

  // .fixbug.ResultCode result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::fixbug::ResultCode& result() const;
  ::fixbug::ResultCode* release_result();
  ::fixbug::ResultCode* mutable_result();
  void set_allocated_result(::fixbug::ResultCode* result);
  private:
  const ::fixbug::ResultCode& _internal_result() const;
  ::fixbug::ResultCode* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::fixbug::ResultCode* result);
  ::fixbug::ResultCode* unsafe_arena_release_result();

  // @@protoc_insertion_point(class_scope:fixbug.ShowAllResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fixbug::KeyValuePair > allkvpair_;
  ::fixbug::ResultCode* result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kv_2eproto;
};
// ===================================================================

class KVServerRPC_Stub;

class KVServerRPC : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline KVServerRPC() {};
 public:
  virtual ~KVServerRPC();

  typedef KVServerRPC_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void InsertKeyValue(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::fixbug::InsertRequest* request,
                       ::fixbug::ResultCode* response,
                       ::google::protobuf::Closure* done);
  virtual void SearchKeyValue(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::fixbug::SearchOrDeleteRequest* request,
                       ::fixbug::SearchResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void DeleteKeyValue(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::fixbug::SearchOrDeleteRequest* request,
                       ::fixbug::ResultCode* response,
                       ::google::protobuf::Closure* done);
  virtual void ShowAllKeyValue(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const PROTOBUF_NAMESPACE_ID::Empty* request,
                       ::fixbug::ShowAllResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(KVServerRPC);
};

class KVServerRPC_Stub : public KVServerRPC {
 public:
  KVServerRPC_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  KVServerRPC_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~KVServerRPC_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements KVServerRPC ------------------------------------------

  void InsertKeyValue(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::fixbug::InsertRequest* request,
                       ::fixbug::ResultCode* response,
                       ::google::protobuf::Closure* done);
  void SearchKeyValue(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::fixbug::SearchOrDeleteRequest* request,
                       ::fixbug::SearchResponse* response,
                       ::google::protobuf::Closure* done);
  void DeleteKeyValue(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::fixbug::SearchOrDeleteRequest* request,
                       ::fixbug::ResultCode* response,
                       ::google::protobuf::Closure* done);
  void ShowAllKeyValue(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const PROTOBUF_NAMESPACE_ID::Empty* request,
                       ::fixbug::ShowAllResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(KVServerRPC_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// KeyValuePair

// int32 key = 1;
inline void KeyValuePair::clear_key() {
  key_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KeyValuePair::_internal_key() const {
  return key_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KeyValuePair::key() const {
  // @@protoc_insertion_point(field_get:fixbug.KeyValuePair.key)
  return _internal_key();
}
inline void KeyValuePair::_internal_set_key(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  key_ = value;
}
inline void KeyValuePair::set_key(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:fixbug.KeyValuePair.key)
}

// bytes value = 2;
inline void KeyValuePair::clear_value() {
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& KeyValuePair::value() const {
  // @@protoc_insertion_point(field_get:fixbug.KeyValuePair.value)
  return _internal_value();
}
inline void KeyValuePair::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:fixbug.KeyValuePair.value)
}
inline std::string* KeyValuePair::mutable_value() {
  // @@protoc_insertion_point(field_mutable:fixbug.KeyValuePair.value)
  return _internal_mutable_value();
}
inline const std::string& KeyValuePair::_internal_value() const {
  return value_.Get();
}
inline void KeyValuePair::_internal_set_value(const std::string& value) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void KeyValuePair::set_value(std::string&& value) {
  
  value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fixbug.KeyValuePair.value)
}
inline void KeyValuePair::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fixbug.KeyValuePair.value)
}
inline void KeyValuePair::set_value(const void* value,
    size_t size) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fixbug.KeyValuePair.value)
}
inline std::string* KeyValuePair::_internal_mutable_value() {
  
  return value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* KeyValuePair::release_value() {
  // @@protoc_insertion_point(field_release:fixbug.KeyValuePair.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KeyValuePair::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fixbug.KeyValuePair.value)
}
inline std::string* KeyValuePair::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:fixbug.KeyValuePair.value)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return value_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void KeyValuePair::unsafe_arena_set_allocated_value(
    std::string* value) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (value != nullptr) {
    
  } else {
    
  }
  value_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      value, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fixbug.KeyValuePair.value)
}

// -------------------------------------------------------------------

// ResultCode

// int32 errcode = 1;
inline void ResultCode::clear_errcode() {
  errcode_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResultCode::_internal_errcode() const {
  return errcode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResultCode::errcode() const {
  // @@protoc_insertion_point(field_get:fixbug.ResultCode.errcode)
  return _internal_errcode();
}
inline void ResultCode::_internal_set_errcode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  errcode_ = value;
}
inline void ResultCode::set_errcode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_errcode(value);
  // @@protoc_insertion_point(field_set:fixbug.ResultCode.errcode)
}

// bytes errmsg = 2;
inline void ResultCode::clear_errmsg() {
  errmsg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ResultCode::errmsg() const {
  // @@protoc_insertion_point(field_get:fixbug.ResultCode.errmsg)
  return _internal_errmsg();
}
inline void ResultCode::set_errmsg(const std::string& value) {
  _internal_set_errmsg(value);
  // @@protoc_insertion_point(field_set:fixbug.ResultCode.errmsg)
}
inline std::string* ResultCode::mutable_errmsg() {
  // @@protoc_insertion_point(field_mutable:fixbug.ResultCode.errmsg)
  return _internal_mutable_errmsg();
}
inline const std::string& ResultCode::_internal_errmsg() const {
  return errmsg_.Get();
}
inline void ResultCode::_internal_set_errmsg(const std::string& value) {
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ResultCode::set_errmsg(std::string&& value) {
  
  errmsg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fixbug.ResultCode.errmsg)
}
inline void ResultCode::set_errmsg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fixbug.ResultCode.errmsg)
}
inline void ResultCode::set_errmsg(const void* value,
    size_t size) {
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fixbug.ResultCode.errmsg)
}
inline std::string* ResultCode::_internal_mutable_errmsg() {
  
  return errmsg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ResultCode::release_errmsg() {
  // @@protoc_insertion_point(field_release:fixbug.ResultCode.errmsg)
  return errmsg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ResultCode::set_allocated_errmsg(std::string* errmsg) {
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), errmsg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fixbug.ResultCode.errmsg)
}
inline std::string* ResultCode::unsafe_arena_release_errmsg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:fixbug.ResultCode.errmsg)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return errmsg_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ResultCode::unsafe_arena_set_allocated_errmsg(
    std::string* errmsg) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      errmsg, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fixbug.ResultCode.errmsg)
}

// -------------------------------------------------------------------

// SearchOrDeleteRequest

// int32 key = 1;
inline void SearchOrDeleteRequest::clear_key() {
  key_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SearchOrDeleteRequest::_internal_key() const {
  return key_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SearchOrDeleteRequest::key() const {
  // @@protoc_insertion_point(field_get:fixbug.SearchOrDeleteRequest.key)
  return _internal_key();
}
inline void SearchOrDeleteRequest::_internal_set_key(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  key_ = value;
}
inline void SearchOrDeleteRequest::set_key(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:fixbug.SearchOrDeleteRequest.key)
}

// -------------------------------------------------------------------

// SearchResponse

// .fixbug.ResultCode result = 1;
inline bool SearchResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool SearchResponse::has_result() const {
  return _internal_has_result();
}
inline void SearchResponse::clear_result() {
  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::fixbug::ResultCode& SearchResponse::_internal_result() const {
  const ::fixbug::ResultCode* p = result_;
  return p != nullptr ? *p : *reinterpret_cast<const ::fixbug::ResultCode*>(
      &::fixbug::_ResultCode_default_instance_);
}
inline const ::fixbug::ResultCode& SearchResponse::result() const {
  // @@protoc_insertion_point(field_get:fixbug.SearchResponse.result)
  return _internal_result();
}
inline void SearchResponse::unsafe_arena_set_allocated_result(
    ::fixbug::ResultCode* result) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fixbug.SearchResponse.result)
}
inline ::fixbug::ResultCode* SearchResponse::release_result() {
  auto temp = unsafe_arena_release_result();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::fixbug::ResultCode* SearchResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:fixbug.SearchResponse.result)
  
  ::fixbug::ResultCode* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::fixbug::ResultCode* SearchResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::fixbug::ResultCode>(GetArena());
    result_ = p;
  }
  return result_;
}
inline ::fixbug::ResultCode* SearchResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:fixbug.SearchResponse.result)
  return _internal_mutable_result();
}
inline void SearchResponse::set_allocated_result(::fixbug::ResultCode* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:fixbug.SearchResponse.result)
}

// .fixbug.KeyValuePair kvPair = 2;
inline bool SearchResponse::_internal_has_kvpair() const {
  return this != internal_default_instance() && kvpair_ != nullptr;
}
inline bool SearchResponse::has_kvpair() const {
  return _internal_has_kvpair();
}
inline void SearchResponse::clear_kvpair() {
  if (GetArena() == nullptr && kvpair_ != nullptr) {
    delete kvpair_;
  }
  kvpair_ = nullptr;
}
inline const ::fixbug::KeyValuePair& SearchResponse::_internal_kvpair() const {
  const ::fixbug::KeyValuePair* p = kvpair_;
  return p != nullptr ? *p : *reinterpret_cast<const ::fixbug::KeyValuePair*>(
      &::fixbug::_KeyValuePair_default_instance_);
}
inline const ::fixbug::KeyValuePair& SearchResponse::kvpair() const {
  // @@protoc_insertion_point(field_get:fixbug.SearchResponse.kvPair)
  return _internal_kvpair();
}
inline void SearchResponse::unsafe_arena_set_allocated_kvpair(
    ::fixbug::KeyValuePair* kvpair) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(kvpair_);
  }
  kvpair_ = kvpair;
  if (kvpair) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fixbug.SearchResponse.kvPair)
}
inline ::fixbug::KeyValuePair* SearchResponse::release_kvpair() {
  auto temp = unsafe_arena_release_kvpair();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::fixbug::KeyValuePair* SearchResponse::unsafe_arena_release_kvpair() {
  // @@protoc_insertion_point(field_release:fixbug.SearchResponse.kvPair)
  
  ::fixbug::KeyValuePair* temp = kvpair_;
  kvpair_ = nullptr;
  return temp;
}
inline ::fixbug::KeyValuePair* SearchResponse::_internal_mutable_kvpair() {
  
  if (kvpair_ == nullptr) {
    auto* p = CreateMaybeMessage<::fixbug::KeyValuePair>(GetArena());
    kvpair_ = p;
  }
  return kvpair_;
}
inline ::fixbug::KeyValuePair* SearchResponse::mutable_kvpair() {
  // @@protoc_insertion_point(field_mutable:fixbug.SearchResponse.kvPair)
  return _internal_mutable_kvpair();
}
inline void SearchResponse::set_allocated_kvpair(::fixbug::KeyValuePair* kvpair) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete kvpair_;
  }
  if (kvpair) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(kvpair);
    if (message_arena != submessage_arena) {
      kvpair = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, kvpair, submessage_arena);
    }
    
  } else {
    
  }
  kvpair_ = kvpair;
  // @@protoc_insertion_point(field_set_allocated:fixbug.SearchResponse.kvPair)
}

// -------------------------------------------------------------------

// InsertRequest

// .fixbug.KeyValuePair kvPair = 1;
inline bool InsertRequest::_internal_has_kvpair() const {
  return this != internal_default_instance() && kvpair_ != nullptr;
}
inline bool InsertRequest::has_kvpair() const {
  return _internal_has_kvpair();
}
inline void InsertRequest::clear_kvpair() {
  if (GetArena() == nullptr && kvpair_ != nullptr) {
    delete kvpair_;
  }
  kvpair_ = nullptr;
}
inline const ::fixbug::KeyValuePair& InsertRequest::_internal_kvpair() const {
  const ::fixbug::KeyValuePair* p = kvpair_;
  return p != nullptr ? *p : *reinterpret_cast<const ::fixbug::KeyValuePair*>(
      &::fixbug::_KeyValuePair_default_instance_);
}
inline const ::fixbug::KeyValuePair& InsertRequest::kvpair() const {
  // @@protoc_insertion_point(field_get:fixbug.InsertRequest.kvPair)
  return _internal_kvpair();
}
inline void InsertRequest::unsafe_arena_set_allocated_kvpair(
    ::fixbug::KeyValuePair* kvpair) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(kvpair_);
  }
  kvpair_ = kvpair;
  if (kvpair) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fixbug.InsertRequest.kvPair)
}
inline ::fixbug::KeyValuePair* InsertRequest::release_kvpair() {
  auto temp = unsafe_arena_release_kvpair();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::fixbug::KeyValuePair* InsertRequest::unsafe_arena_release_kvpair() {
  // @@protoc_insertion_point(field_release:fixbug.InsertRequest.kvPair)
  
  ::fixbug::KeyValuePair* temp = kvpair_;
  kvpair_ = nullptr;
  return temp;
}
inline ::fixbug::KeyValuePair* InsertRequest::_internal_mutable_kvpair() {
  
  if (kvpair_ == nullptr) {
    auto* p = CreateMaybeMessage<::fixbug::KeyValuePair>(GetArena());
    kvpair_ = p;
  }
  return kvpair_;
}
inline ::fixbug::KeyValuePair* InsertRequest::mutable_kvpair() {
  // @@protoc_insertion_point(field_mutable:fixbug.InsertRequest.kvPair)
  return _internal_mutable_kvpair();
}
inline void InsertRequest::set_allocated_kvpair(::fixbug::KeyValuePair* kvpair) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete kvpair_;
  }
  if (kvpair) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(kvpair);
    if (message_arena != submessage_arena) {
      kvpair = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, kvpair, submessage_arena);
    }
    
  } else {
    
  }
  kvpair_ = kvpair;
  // @@protoc_insertion_point(field_set_allocated:fixbug.InsertRequest.kvPair)
}

// -------------------------------------------------------------------

// ShowAllResponse

// .fixbug.ResultCode result = 1;
inline bool ShowAllResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool ShowAllResponse::has_result() const {
  return _internal_has_result();
}
inline void ShowAllResponse::clear_result() {
  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::fixbug::ResultCode& ShowAllResponse::_internal_result() const {
  const ::fixbug::ResultCode* p = result_;
  return p != nullptr ? *p : *reinterpret_cast<const ::fixbug::ResultCode*>(
      &::fixbug::_ResultCode_default_instance_);
}
inline const ::fixbug::ResultCode& ShowAllResponse::result() const {
  // @@protoc_insertion_point(field_get:fixbug.ShowAllResponse.result)
  return _internal_result();
}
inline void ShowAllResponse::unsafe_arena_set_allocated_result(
    ::fixbug::ResultCode* result) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fixbug.ShowAllResponse.result)
}
inline ::fixbug::ResultCode* ShowAllResponse::release_result() {
  auto temp = unsafe_arena_release_result();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::fixbug::ResultCode* ShowAllResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:fixbug.ShowAllResponse.result)
  
  ::fixbug::ResultCode* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::fixbug::ResultCode* ShowAllResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::fixbug::ResultCode>(GetArena());
    result_ = p;
  }
  return result_;
}
inline ::fixbug::ResultCode* ShowAllResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:fixbug.ShowAllResponse.result)
  return _internal_mutable_result();
}
inline void ShowAllResponse::set_allocated_result(::fixbug::ResultCode* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:fixbug.ShowAllResponse.result)
}

// repeated .fixbug.KeyValuePair allKvPair = 2;
inline int ShowAllResponse::_internal_allkvpair_size() const {
  return allkvpair_.size();
}
inline int ShowAllResponse::allkvpair_size() const {
  return _internal_allkvpair_size();
}
inline void ShowAllResponse::clear_allkvpair() {
  allkvpair_.Clear();
}
inline ::fixbug::KeyValuePair* ShowAllResponse::mutable_allkvpair(int index) {
  // @@protoc_insertion_point(field_mutable:fixbug.ShowAllResponse.allKvPair)
  return allkvpair_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fixbug::KeyValuePair >*
ShowAllResponse::mutable_allkvpair() {
  // @@protoc_insertion_point(field_mutable_list:fixbug.ShowAllResponse.allKvPair)
  return &allkvpair_;
}
inline const ::fixbug::KeyValuePair& ShowAllResponse::_internal_allkvpair(int index) const {
  return allkvpair_.Get(index);
}
inline const ::fixbug::KeyValuePair& ShowAllResponse::allkvpair(int index) const {
  // @@protoc_insertion_point(field_get:fixbug.ShowAllResponse.allKvPair)
  return _internal_allkvpair(index);
}
inline ::fixbug::KeyValuePair* ShowAllResponse::_internal_add_allkvpair() {
  return allkvpair_.Add();
}
inline ::fixbug::KeyValuePair* ShowAllResponse::add_allkvpair() {
  // @@protoc_insertion_point(field_add:fixbug.ShowAllResponse.allKvPair)
  return _internal_add_allkvpair();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fixbug::KeyValuePair >&
ShowAllResponse::allkvpair() const {
  // @@protoc_insertion_point(field_list:fixbug.ShowAllResponse.allKvPair)
  return allkvpair_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace fixbug

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_kv_2eproto
